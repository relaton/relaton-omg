---
http_interactions:
- request:
    method: get
    uri: https://www.omg.org/spec/AMI4CCM/1.0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Thu, 07 Oct 2021 09:12:49 GMT
      Server:
      - Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16 mod_perl/2.0.10 Perl/v5.16.3
      Cache-Control:
      - max-age=86400, public
      Etag:
      - W/"0b0a1f1f36589d3723a20bec6b5898c52"
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Content-Language:
      - en-US
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 07 Oct 2021 09:12:49 GMT
recorded_with: VCR 6.0.0
