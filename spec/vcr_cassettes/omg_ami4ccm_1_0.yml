---
http_interactions:
- request:
    method: get
    uri: https://www.omg.org/spec/AMI4CCM/1.0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Fri, 28 Jan 2022 17:40:15 GMT
      Server:
      - Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16 mod_perl/2.0.10 Perl/v5.16.3
      Cache-Control:
      - max-age=86400, public
      Etag:
      - W/"08aa7051fd2c69835b181181642b5019f"
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Content-Language:
      - en-US
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 28 Jan 2022 17:40:15 GMT
recorded_with: VCR 6.0.0
