---
http_interactions:
- request:
    method: get
    uri: https://www.omg.org/spec/AMI4CCM/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: '200'
    headers:
      Date:
      - Fri, 27 Nov 2020 12:39:47 GMT
      Server:
      - Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16 mod_perl/2.0.10 Perl/v5.16.3
      X-Arequestid:
      - 459x581760x2
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self'
      X-Asen:
      - SEN-L16286435
      Set-Cookie:
      - JSESSIONID=8AF5735FA06F9050EDE62625B4EF42A6; Path=/; Secure; HttpOnly
      - atlassian.xsrf.token=BZ1S-78OQ-47MN-5Q1I_602d8455b1aa4baeff69d849b9ae154b90163511_lout;
        Path=/; Secure
      X-Ausername:
      - anonymous
      Cache-Control:
      - max-age=60, private
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 27 Nov 2020 12:39:48 GMT
recorded_with: VCR 6.0.0
