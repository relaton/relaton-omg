---
http_interactions:
- request:
    method: get
    uri: https://www.omg.org/spec/AMI4CCM/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: '200'
    headers:
      Date:
      - Thu, 18 Mar 2021 13:40:30 GMT
      Server:
      - Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16 mod_perl/2.0.10 Perl/v5.16.3
      X-Arequestid:
      - 580x2049597x1
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self'
      X-Asen:
      - SEN-L16847816
      Set-Cookie:
      - JSESSIONID=CE3B4934F32A7D46BD4039275EF3FB72; Path=/; Secure; HttpOnly
      - atlassian.xsrf.token=BZ1S-78OQ-47MN-5Q1I_e54786df8a62c06efc80a0ab6afdbc11db8f3007_lout;
        Path=/; Secure
      X-Ausername:
      - anonymous
      Cache-Control:
      - max-age=60, private
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 18 Mar 2021 13:40:30 GMT
recorded_with: VCR 6.0.0
