---
http_interactions:
- request:
    method: get
    uri: https://www.omg.org/spec/UML/2.1.1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 02 Mar 2025 03:48:52 GMT
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - max-age=86400, public, s-maxage=3600
      Vary:
      - accept-encoding
      Content-Language:
      - en-US
      Cf-Cache-Status:
      - REVALIDATED
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=kftmm6oHE%2FuEVe6o3wNh15IZ9Vdjh2U%2F6%2BzOuOn%2F7pyR9W0YhmuX9djAPaO%2BYGvF1PUDf%2F5Hi2GvlnS7ue7taJbyGS%2Byq0Ia0RAIAWEWt%2Fd0R%2BctETz9ZqdRhCInQ%2BjQ%2FZPNUldocX1Z"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'
      Server:
      - cloudflare
      Cf-Ray:
      - 919debc66c2653f6-ATL
      Alt-Svc:
      - h3=":443"; ma=86400
      Server-Timing:
      - cfL4;desc="?proto=TCP&rtt=8980&min_rtt=8748&rtt_var=3745&sent=5&recv=6&lost=0&retrans=0&sent_bytes=2781&recv_bytes=753&delivery_rate=381185&cwnd=252&unsent_bytes=0&cid=6cc0040ab37b6197&ts=114&x=0"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 02 Mar 2025 03:48:52 GMT
recorded_with: VCR 6.3.1
